良好的OO设计必须具备
可 复 用 、 可 扩 充 、 可 维 护 三个特性。
OO基础
抽象、封装、多态、继承
OO原则
封装变化、多用组合，少用继承、针对接口编程，不针对实现编程
OO模式
定义算法族

OO设计原则
依赖倒置原则，要依赖抽象，不要依赖具体类

--策略模式
定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

--观察者模式
在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。这就叫提前规划！

主题与观察者都使用接口：观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样可以让两者之间运作正常，又同时具有松耦合的优点。

观察者模式利用“组合”将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式而产生的

--装饰者模式
动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择

--工厂模式
简单工厂不是工厂模式，只是单纯一个builder