package leecode;

import cn.hutool.crypto.SecureUtil;
import cn.hutool.crypto.symmetric.DES;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Demo77 {
//

    public static void main(String[] args) {
//        new Demo77().combine(4, 2);
//        String str="6532452916ACD32B3792FDB0B61E008FEFCF4FA722BB2145F722EDDC1186D1172136D4DF87B094BB4082A9261A7E409DA6BA9F912970478D26B92309E5E27C34A2876D5A78355DEF5055D46E6D8966B6C0CEF66F30653531C7CB652DC65BF63B9153C7EA4D0284C62BC8C4AE06ACA6F515B638D340A4A1786CD1C6877A3FD5096E103E7931C8DA81BE017AB7A4DC596ECFA81A96F2D9D5FFD406D74373DD5E52924D5CC79428158EFF263CC0FA384D18AEA991635C8A3E8FD39C5318454DF0C7BC62E21243F7ACB66215FDEAF827B271150D9B28B6906A33C9ACE8A418CD6DD9D871F935313FF892B485BD1C02F1CF4986D4A9E8AD7BEC5920767009B2B236DF6841FA69188C26DD5ECB068F09F05E296AF029C191AB6214467D3644C79EC8909C29AAC5EF8CE703CE8C874DB348C038715CECD6924FBF88451D20AB21B1C74C42EB4CB67F974C47829D5BF8B6CF0EF35F679D0B6F28AE97EF4CEA8C0860287CDD587A12577BF4E8A83025DD984DF4E781F5D93D9CA27153BC437035E88CFA990C9957BD680F7BDF50A12738010054A98FA9BE8D24970B0385B932F7A76B514E7B97108F1A2FD3627589A1E27D243D06FB87CB45417F43400BB562F5A9481610B9091BCD144EC0CD32C764255F90885FD5690ADE5A24B217BE677278B57ED29BEA25153546C4E0F3A669774F4F1EBBEF2FBDACFC4FACED300AAEF7726313B0039DE935EEAEEA36A347A00539349FA654B50E1952159F244909580B7C690ADBEF7A6446431B95803A1D31874FA3426800D1F77B7B8670E03278A353282FBEF5A66C99E9248C9BB6BE9DE935EEAEEA36A3F5F7478FED88D9C3F84AB27AC123BF1189D659F0FB677B101E25FF0BCE83ED2F603CFD926EA5BC4197FCD08D6D24E4F31C8DC8B1F02D5E56DBA19230D21DF6BC83930F3684BD6385F0C76AF86703A8B4D6A641D3A36C2569A1C53295FE79268698053814EE96BA3716F7377BE5352356006E7AFD4D0302416DA10F0E6D0B70C0CCF8FBCDED36F94FEFB885533682BF258E999E6D482339EA43827ACC57F93ECC27FF1627206281C9A27D58A90C4396661AAC30405E8A22C0A311FBBC474F0CE685CD01244D2A2319AEBEAFF9A185DC970DE9B1DAE10E98AE86E64715F46BAF63D47539764DF3304C17AB719DCF6962C020501AA3B298B5AED5BDBA7FFE37C3FD19776067FFFC15134AC325FA95DAAFB747A0D88699482C0EC4B5E5C8BD371D39EA32F5B24994CC2B9DE935EEAEEA36A36BD7A600DA4D9BB85D2FB3493D5187975A5F4F5A7AD846369DECAE8B97E1F2131FD27C95734BC3DEA5E7FA7EDFADA105462A9D19513873DED377E9A392CB582C7B91048553D1CCF240994AF3745877C97C3FA27D4073200AFA2060E86CD42028C7BF9FE2D93C0884BDCF9EB63E4CA567FEA079A3F8C2BF14FEEE943AFC6A03E4C519084AE2C9FD042E6828CACCB5712B551C9E03FB60348A0C9957BD680F7BDF83ED5D48DA1FACB37ECA32403FE75E5CB6ABAB1297067F151A792BE5050366D4B159C57585BF5637904413ADD94318BDDD46734146FE40A14E084B8B26AE33338F868D6BE53DC8C929A79300B0AD157D97584C895B1E2D4A45B34F3C8C79097CCD8ED8683751DFCD29CF52EEAED4BF2A0BEE9E54607704CB28F8386175AC708E437CD7E9B8545321DB11B0CCA92E54B8353FCA2E11A4A4C23BAE686B8BDA507D34609617963246C0A4FD278E206D21B8B03AFFEF9AE1DFF9439B7659016187D19C7F19889E8D273FC13776C1AA967F320FB37433C13D957F345FD0B0BD58C77DF105FF3F2DCA9A8A97FE6B84AED6992775A72B3AD801776A6057532E1E0E4E9ADA14E7157220647EA19FBA74AF01A142BD5578772B23FC2C7ECA32403FE75E5CD11AFFA4C113298E787D4779915797B19363CC887353F3983C9C20E05919EC6B86E64715F46BAF63D47539764DF3304C0D4CD357038B5BC76CF6405F3A5C364692AE92DA692641EB18F7AD2AC0D7A05920501AA3B298B5AE05A2AE38068E75399412236CF5D1A422F0D3A22BCF7457A2B97504AB1D2F2F81C040BF7F655FD3C4EAA8A133DEBAE4EA6C6727E61C2B85012AA9C9EABB6681DABDDBD07DCB3AC13BCC126E04E7D51ECC06D154759FE4F742C306023D95A525C6647202D1D29CA94FBC314C83790CF85CAD8B3C73CA5E47C876E66974ABE0A2E75B4E6B1F9CDBF1999831B64D08E8A8E0C519084AE2C9FD04E4E0F5B5B31A8A5D1FD55D9D4933967E2AD612AF28A9D67599FB4B654E8B2905162EDF2191D6C133230C2BAC1BD9D24D1392B04335549A6D7ECA32403FE75E5CB6ABAB1297067F155757AB3140F5601A6FC966D8C4A8EA05BA4A556DFB96E149673E5DB0165420239378EE2065F9ECD8EF696AD915CEAF7D9D0FF62CF3A2604FE7DD5C486001BE6A89B82E40385AC4DFC5E89926486CA093D4CB9DB9AE424FF70AF5DEEB10B46059C2110FC1AC6ED815D4D4A3F761D4637F1392B04335549A6D7ECA32403FE75E5CB6ABAB1297067F155757AB3140F5601A6FC966D8C4A8EA05BA4A556DFB96E149673E5DB0165420239378EE2065F9ECD8EF696AD915CEAF7D869D1C57B9475EF5E7DD5C486001BE6A22DAD85ADAC19D26C5E89926486CA093B29A5A443DDEC4CEF892D154E6E57945FEA079A3F8C2BF143846AB893A1CF2305B1AECC3ADFAAF18436341C79133BC3D1F8455B1313A4CDCD9538B8D56BB3571B5D65C1DD68FE422235F08A9FC708040A3DBFE3ADABE8FAAA6E7F4609045767B1B23A5A31688D387A6E7F4609045767BD19769E5B35D725E829683B4B53BE248E5DEA4BC6871824E35CA4FC28F813F5E0A93298BE8D0D8E58A65565AA33CAB328DFA3A67C4814FA06B6321F0ED19176931EE707012F20F2FD1D78F691AD5FF935F4A337980AB08A004E2D0B139F8E15C61DF75E3C4CB82782E598123AB51DC558197A3A4E0DC6C079C292381B76167F634E5864F941F7DDF98368F60BF97C7F1A105D7DD9956A0B05FE7E780A06FA20002BC43EE978408FD944D0C39CA9FD2AE3A1F8163B2E31A16AE71DAC3018A964C26730CA241A37F09839F83F408D250EF8B80133E3EA18D992700046A47E7F8594D743B40D5026F24D235E4F69AEE41576C5E406381FEE0605CDDB2238E75BEACF75802600E7ABF8577843638B0B919F0E04BC649B3686BDEEF39AA1E027EB030D7F655B0D2D1DDDEF05EC5E815B27815F8A0BD15A2A0FF0593BE5787A82C65E262021B41C0B651AD71706A06FCB92FA2974E69308D99BA88C807C9BDF72D85C71BB2F9D5366A194A472491E9EFC40C48D7C4E7D4323BD29D43E9AA3D3379D94C463B878FDFCEE62F0B8D6D1E2681AE39D46F2D0801675A724EC0BE4695E2221DB71C89C88740982BD84E88C185BA8FCC2041970D61EBCECCD3545BCCF55EB972C7A3059C9126A3AAA23D1A3E834C08D392D1498AB2DA109A2C378E05930BA9F5C807C9BDF72D85C71BB2F9D5366A194A472491E9EFC40C48D7C4E7D4323BD29D43E9AA3D3379D94C463B878FDFCEE62F0B8D6D1E2681AE3989A8C53C9D316EEBFE226BDCDFB48719327BAC78CEE3381907F0792A7750525B4F53FA2C0CCC1311C44BE5D389FCA4E14DD59217FACBDCBD2B19E55DD7BFFB05B6AFD0B6296D18D8A6E9BB706C134026E7CC00D268C51D5D7D8F17BC0B79B7B8EDFB1A85B3DC24F93C514EE94D5F3823780652BCCFCA5CA41BC7F94262A2782C888A239D4C8789AD38F7351BEE486BE50C8B87457610EFEEAC6A557E8448EB860C8B87457610EFEEE1A877D05DBC801B0EAC38C8A5BFA8CA1C2C51A613089C9DB084D66039D662C8F6479AB74E8736F51B23A5A31688D3877CF6F9F03C19EB84E349DD980DBE04CD437CD7E9B8545321EB25CD0C29D5249DC0D334021F66CFC770DC483DAD7E981E0D897FB2AB882BC23C514EE94D5F3823D1A33203A7476C111ADB622421BC812E1D794735DBCD91F3FA4B2E6C4E9C977AAC6971935C478D9D9BF89D9CC422597303B0FD8F3CAA1F184AA5FF8DF9F3C71CF3C26C744C732969BBFF232EEDD06C6F6FD75B5359927E57BE72E9767809336753386B4137F82AAAB67F0CFC7A95FEFB156667DF920BF531C8E57E3A1654DCF893D9A5FD001A8D2D2884AD451AD21C96AE1E614DBD41F431A015A219EA592B5A09A71B499BBD0671261C2DA41E25ABCBF3C8760317EB5CC972F601CE79FD24E77E2F9D6CBA6F8B9666F622AF2680FA77411DE29C9324211C6E5BF59A5C2DB005B32269AF9DFBA3652B38789E7106745A88849F7A37A21F320063466A090B43737ECCCF919620B4188FA9BE8D24970B0385B932F7A76B514E7B97108F1A2FD3627589A1E27D243D06FB87CB45417F43400BB562F5A9481610B9091BCD144EC0CD32C764255F90885FD5690ADE5A24B217BE677278B57ED29BEA25153546C4E0F3A669774F4F1EBBEF2FBDACFC4FACED300AAEF7726313B003E4D4A83593C6F920596B32BCC804BB8EC1FF65139B6D059F9FAC5863139FD7B4DAF4A318C016FAEDD380EF754E8DE44F84A24930FAFBFFF2FDFDCA124448E940D83C8CB1FFEB45D17DF60127308B5300ABE312D728AFA6EA4DBBEFF056C1B8E054575D1C56B2E1339AC95536D8AC3C7095E7C25CA6BDFEA633A576F1638809E54FF597B8400B8D9896F28B73669AF0A7BB629569D5FF37F9F7ADEEB039C8749F8924C2C5270C4F7929B924D64EFEB2087F2C54A4918ACBC1CD6823175AD013E783FF7167B5D45BB87745179BE47336EC278F161AFB3483AB0F74E84518A61E3CBC3B5911607CBD538C2CB13747190FF5D393C019092CB542403700C03AC9A405D34695DE92100D74A506186EACFC5E80FA66733EE693245CBBFD3DFD531D073455BF6B12BBFC6ED2F5E0F810EB9F11AFC92239CE136FE4FF7A8E0FCEF7A5D908D42EC586474D21CAD765F9895C61B8D26CD31BDB894A8F6CCD0024C3CC9B11DCC77450478B05BD377640B43DD859527AA052335833743A862FA84AE48F2F4FF2516D6A4A234BB866B541D36ED66699D50DD14537654CDAEAE1F389BD122595BECC892AA6BD068413050BBCBAABD2EE3A3DF15B6086F240D7A9B725D42A307E86B726845A3311DF6A565D626C6633B1D14A7EE63FAC140BF0CABCBDE3B73C6CBDAF361ED5E1D153150F9BDD64A57F191C80A14A5E7E47E7F16AB3BCFD819AFD1FC2D71E6CBCC0EE51514E913F260457197BC3908BB5BD4FF1FFBCBA05D42E7AA047260D44C0780936DD2AAC42B20E03BA79FB3685DBE5F018971A8CE98C1BA65B07406E0274C17C1C967D310C05931DB18CC94CB3A8127A33A89989BA67FC83ACA3D9CDD4CE790A56218B031B5B7104779373E3103191B1938AC509F10AECCCAABBB8FB651178B2D278429AA93497C961627FB8156FE83AAA3537BD1136D39D56B0EB0D4978E99EC1";
//        DES des = SecureUtil.des("10241024".getBytes());
//        String s = des.decryptStr(str);
//
//        System.out.println(s);


    }
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> cacheList = new ArrayList<>();
    public List<List<Integer>> combine(int n, int k) {
        dfs(1, n, k);
        return result;
    }

    public void dfs(int start, int n, int k) {
        if (k == 0) {
            result.add(new ArrayList<>(cacheList));
            return;
        }

        for (int i = start; i <= n; i++) {
            cacheList.add(i);
            dfs(i + 1, n, k - 1);
            cacheList.remove(cacheList.size() - 1);
        }

    }



}